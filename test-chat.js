// –¢–µ—Å—Ç —á–∞—Ç–∞ GPT —á–µ—Ä–µ–∑ —Ç–µ—Ä–º–∏–Ω–∞–ª
const testChatGPT = async () => {
  const apiUrl = 'https://rork-haulz-api-test.onrender.com';
  
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —á–∞—Ç–∞ GPT...');
  console.log('API URL:', apiUrl);
  
  try {
    // –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ API
    console.log('\n1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ API...');
    const statusResponse = await fetch(`${apiUrl}/`);
    const statusData = await statusResponse.json();
    console.log('‚úÖ –°—Ç–∞—Ç—É—Å API:', statusData);
    
    // –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ tRPC —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞
    console.log('\n2Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ tRPC —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞...');
    const trpcResponse = await fetch(`${apiUrl}/api/trpc/chat.gpt`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        "0": {
          "json": {
            "messages": [
              {
                "role": "user",
                "content": "–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞? –û—Ç–≤–µ—Ç—å –∫–æ—Ä–æ—Ç–∫–æ."
              }
            ]
          }
        }
      })
    });
    
    console.log('üì° –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞:', trpcResponse.status);
    console.log('üì° –ó–∞–≥–æ–ª–æ–≤–∫–∏:', Object.fromEntries(trpcResponse.headers.entries()));
    
    const trpcData = await trpcResponse.text();
    console.log('üì° –û—Ç–≤–µ—Ç tRPC:', trpcData);
    
    if (trpcResponse.ok) {
      try {
        const parsedData = JSON.parse(trpcData);
        console.log('‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ JSON —É—Å–ø–µ—à–µ–Ω:', parsedData);
      } catch (e) {
        console.log('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON:', e.message);
      }
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
  }
};

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞
testChatGPT();
